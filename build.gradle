buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}
        
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'

version = '0.0.0.1'
archivesBaseName = 'Hacker\'s Morph'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

def modlibs = []
for (lib in file(undeobfed_mods_dir).listFiles()) {
    if (lib.name.endsWith('.jar')) {
        modlibs << lib.name[0..-5]
    }
}
def isModLibs = {
    path -> path.contains("bin_mapped_${mcp_channel}_${mcp_version}") ? 1 : 0
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: mcp_channel, version: mcp_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            environment 'MC_VERSION', mc_version
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            environment 'MC_VERSION', mc_version
        }
    }
}

dependencies {
    repositories {
        flatDir { dirs undeobfed_mods_dir }
    }
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    for (lib in modlibs) {
    	if (lib.toLowerCase().contains("optifine")) {
        	compileOnly fg.deobf('modlibs:' + lib + ':bin@jar')
        } else {
        	compile fg.deobf('modlibs:' + lib + ':bin@jar')
        }
    }
}

// Sort Modules
eclipse {
    classpath {
        file {
            whenMerged {
                classpath ->
                    entries.sort { a, b -> isModLibs(a.path) - isModLibs(b.path) }
            }
        }
    }
}

jar {
    manifest {
        if (coremod_class != null && coremod_class != '')
            attributes([
                'FMLCorePlugin': coremod_class,
                'FMLCorePluginContainsFMLMod': 'true'
            ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

task prepareModLibs {
    doFirst {
        def coremods = []
        if (coremod_class != null && coremod_class != '') coremods << coremod_class
        for (lib in modlibs) {
            def jar = new java.util.jar.JarFile(file("${undeobfed_mods_dir}/${lib}.jar"))
            def coremod = jar.getManifest().getMainAttributes().getValue('FMLCorePlugin')
            if (coremod != null && coremod != '') coremods << coremod
        }
        def fmlcoremods = ''
        for (coremod in coremods) {
            fmlcoremods += "${coremod},"
        }
        fmlcoremods = fmlcoremods[0..-2]
        minecraft.runs.getAsMap().each({
            _, config ->
                // load coremods
                config.property 'fml.coreMods.load', fmlcoremods
                def run = tasks.getByName(config.getTaskName())
                run.systemProperty 'fml.coreMods.load', fmlcoremods

                // Sort Classpath
                def cplist = []
                for (cp in run.getClasspath()) cplist << cp
                cplist.sort { a, b -> isModLibs(a.path) - isModLibs(b.path) }
                run.setClasspath(run.getExecActionFactory().fileResolver.resolveFiles(cplist))
        })
    }
}

tasks.whenElementKnown {
    element -> 
        if (element.getType() == org.gradle.api.DefaultTask.class)
            if (element.name == 'prepareRuns') element.o.dependsOn 'prepareModLibs'
}

task cleanMod(group: 'build') {
	doLast {
    	def dists = file('dists')
    	if (dists.exists())
        	delete dists
		def classes = file('build/classes')
		if (classes.exists())
			delete classes
	}
}

task buildMod(dependsOn: ['jar'], group: 'build') {
    doLast {
    	def dists = file('dists')
    	if (dists.exists())
        	delete dists
        dists.mkdirs()
        copy() {
            copySpec ->
                from file("build/libs/${archivesBaseName}-${version}.jar")
                into "dists"
                rename {_ -> "${archivesBaseName}-${version}-dev.jar"}
        }
        copy() {
            copySpec ->
                from file("build/reobfJar/output.jar")
                into "dists"
                rename {_ -> "${archivesBaseName}-${version}.jar"}
        }
    }
}

tasks.withType(JavaCompile) {  
    options.encoding = "UTF-8"
}
